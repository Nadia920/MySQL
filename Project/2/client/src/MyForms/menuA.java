package MyForms;

import AllData.Applications;
import AllData.Cards;
import AllData.Client;
import AllData.Loans;
import ClientWork.SocketStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import AllData.Operations;
import AllData.Payment;
import AllData.Services;
import AllData.User;
import TableModels.ApplicationsTableInf;
import TableModels.CardsTableInf;
import TableModels.ClientTableInf;
import TableModels.LoansTableInf;
import TableModels.OperationsTableInf;
import TableModels.PaymentsTableInf;
import TableModels.ServicesTableInf;
import TableModels.TableUsersInf;
import java.util.ArrayList;

public class menuA extends javax.swing.JFrame {

    SocketStream socketstream = new SocketStream();

    public menuA() {
        initComponents();
    }
    SocketStream socketStream = new SocketStream();
    String size = null;
    String str1, str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12;
    int i = 0;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        showCard = new javax.swing.JRadioButton();
        showCardsPerson = new javax.swing.JRadioButton();
        Borrow = new javax.swing.JRadioButton();
        orderAccount = new javax.swing.JRadioButton();
        BlockCard = new javax.swing.JRadioButton();
        AllPayment = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        controlOperations = new javax.swing.JRadioButton();
        controlServices = new javax.swing.JRadioButton();
        controlUsers = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Выберите, что Вы хотите сделать");

        showCard.setText("Посмотреть счета всех пользователей");

        showCardsPerson.setText("Посмотреть карты ");

        Borrow.setText("Вклады и займы");

        orderAccount.setText("Заказы на новый счёт");

        BlockCard.setText("Заблокировать карту");

        AllPayment.setText("Посмотреть все платежи по карте ");

        jButton1.setText("Выбрать");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        controlOperations.setText("Управлять таблицей операций");

        controlServices.setText("Управлять таблицей услуг");

        controlUsers.setText("Управлять таблицей пользователей");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(116, 116, 116)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(showCard, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(orderAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(BlockCard, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AllPayment))
                                .addGap(57, 57, 57)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(controlOperations, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(controlUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(showCardsPerson, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Borrow, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(controlServices, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(57, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(showCard)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showCardsPerson)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Borrow)
                    .addComponent(controlServices, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(orderAccount)
                    .addComponent(controlOperations))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BlockCard)
                    .addComponent(controlUsers))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(AllPayment)
                .addGap(76, 76, 76)
                .addComponent(jButton1)
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        if (showCard.isSelected()) {
            this.setVisible(false);
            FormClient get1 = new FormClient();
            get1.setVisible(true);
            get1.setLocationRelativeTo(null);
        }
        if (showCardsPerson.isSelected()) 
        {
           
            /* try {
                socketstream.sendInt(2);
                //menuA A = menuA();
                infCards();
            } catch (IOException ex) {
                Logger.getLogger(menuA.class.getName()).log(Level.SEVERE, null, ex);
            }*/
            this.setVisible(false);
            FormCards get = new FormCards();
            get.setVisible(true);
            get.setLocationRelativeTo(null);
        }
        if (Borrow.isSelected()) 
        {
            
            //functionBorrow();
            this.setVisible(false);
            FormLoans get = new  FormLoans();
            get.setVisible(true);
            get.setLocationRelativeTo(null);
        }
        if (orderAccount.isSelected()) 
        {
           
            //fuctionOrderAccount();
            this.setVisible(false);
            FormApplications get = new FormApplications();
            get.setVisible(true);
            get.setLocationRelativeTo(null);
        }
        if (BlockCard.isSelected()) 
        {
            
            Block block = new Block();
            block.setVisible(true);
            block.setLocationRelativeTo(null);
        }
        if (AllPayment.isSelected()) 
        {
           
            //functionAllPayment();
            this.setVisible(false);
            FormPayments get = new FormPayments();
            get.setVisible(true);
            get.setLocationRelativeTo(null);
        }

        if (controlOperations.isSelected()) 
        {
            this.setVisible(false);
            FormOperations formOperations = new FormOperations();
            formOperations.setVisible(true);
            formOperations.setLocationRelativeTo(null);
        }

        if (controlServices.isSelected()) 
        {

                this.setVisible(false);
                FormServices formServices = new FormServices();
                formServices.setVisible(true);
                formServices.setLocationRelativeTo(null);
        }

            if (controlUsers.isSelected()) 
            {
                
                this.setVisible(false);
                FormUsers formUsers = new FormUsers();
                formUsers.setVisible(true);
                formUsers.setLocationRelativeTo(null);
            }
    }//GEN-LAST:event_jButton1ActionPerformed

    public void functionShowCard() {

       /* try {
            size = socketStream.getString();

        } catch (IOException ex) {
            Logger.getLogger(menuA.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        ArrayList<Client> client = new ArrayList<Client>();

        while (i < Integer.parseInt(size)) {
            try {
                str1 = socketStream.getString();

            } catch (IOException ex) {
                Logger.getLogger(menuA.class
                        .getName()).log(Level.SEVERE, null, ex);

            }
            try {
                str2 = socketStream.getString();

            } catch (IOException ex) {
                Logger.getLogger(menuA.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            try {
                str3 = socketStream.getString();

            } catch (IOException ex) {
                Logger.getLogger(menuA.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            try {
                str4 = socketStream.getString();

            } catch (IOException ex) {
                Logger.getLogger(menuA.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            try {
                str5 = socketStream.getString();

            } catch (IOException ex) {
                Logger.getLogger(menuA.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            try {
                str6 = socketStream.getString();

            } catch (IOException ex) {
                Logger.getLogger(menuA.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            try {
                str7 = socketStream.getString();

            } catch (IOException ex) {
                Logger.getLogger(menuA.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            try {
                str8 = socketStream.getString();

            } catch (IOException ex) {
                Logger.getLogger(menuA.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            try {
                str9 = socketStream.getString();

            } catch (IOException ex) {
                Logger.getLogger(menuA.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            Client clientobj = new Client(str1, str2, str3, str4, str5, str6, str7, str8, str9);
            client.add(clientobj);

            i++;

        }
        ClientTableInf clientTableInf = new ClientTableInf();*/
    }

    void infCards() throws IOException {
        int count = socketstream.getInt();
        /*ArrayList<Cards> cards = new ArrayList<Cards>();
        for (int i = 0; i < count; i++) {

            String number_card = socketstream.getString();
            String validity = socketstream.getString();
            String CVV = socketstream.getString();
            String card_balance = socketstream.getString();
            String status = socketstream.getString();
            Cards cardobj = new Cards(number_card, validity, CVV, card_balance, status);
            cards.add(cardobj);
        }
        CardsTableInf cardsTableInf = new CardsTableInf();*/
    }
    // установка группы

    void functionBorrow() {
        /*try {
            size = socketstream.getString();

        } catch (IOException ex) {
            Logger.getLogger(menuA.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        ArrayList<Loans> loans = new ArrayList<Loans>();
        Integer id = null;
        for (i = 0; i < Integer.parseInt(size); i++) {
             try {
                id = socketstream.getInt();

            } catch (IOException ex) {
                Logger.getLogger(menuA.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            try {
                str1 = socketstream.getString();

            } catch (IOException ex) {
                Logger.getLogger(menuA.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            try {
                str2 = socketstream.getString();

            } catch (IOException ex) {
                Logger.getLogger(menuA.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            try {
                str3 = socketstream.getString();

            } catch (IOException ex) {
                Logger.getLogger(menuA.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            try {
                str4 = socketstream.getString();

            } catch (IOException ex) {
                Logger.getLogger(menuA.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            try {
                str5 = socketstream.getString();

            } catch (IOException ex) {
                Logger.getLogger(menuA.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            try {
                str6 = socketstream.getString();

            } catch (IOException ex) {
                Logger.getLogger(menuA.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            try {
                str7 = socketstream.getString();

            } catch (IOException ex) {
                Logger.getLogger(menuA.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            try {
                str8 = socketstream.getString();

            } catch (IOException ex) {
                Logger.getLogger(menuA.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            try {
                str9 = socketstream.getString();

            } catch (IOException ex) {
                Logger.getLogger(menuA.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            Loans loansObj = new Loans(id, str1, str2, str3, str4, str5, str6, str7, str8, str9);
            loans.add(loansObj);
        }
        LoansTableInf inf = new LoansTableInf(loans);*/
    }

    void fuctionOrderAccount() {
        /*int id = 0;
        try {
            size = socketstream.getString();

        } catch (IOException ex) {
            Logger.getLogger(menuA.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        ArrayList<Applications> applications = new ArrayList();
        for (i = 0; i < Integer.parseInt(size); i++) {
            try {
                str1 = socketstream.getString();
id = socketstream.getInt();
            } catch (IOException ex) {
                Logger.getLogger(menuA.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            try {
                str2 = socketstream.getString();

            } catch (IOException ex) {
                Logger.getLogger(menuA.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            try {
                str3 = socketstream.getString();

            } catch (IOException ex) {
                Logger.getLogger(menuA.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            try {
                str4 = socketstream.getString();

            } catch (IOException ex) {
                Logger.getLogger(menuA.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            Applications applObj = new Applications(id, str1, str2, str3, str4);
            applications.add(applObj);
        }
        ApplicationsTableInf str = new ApplicationsTableInf(applications);*/
    }

    void functionAllPayment() {
        /*try {
            size = socketstream.getString();

        } catch (IOException ex) {
            Logger.getLogger(menuA.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        ArrayList<Payment> listPayment = new ArrayList<Payment>();
        for (i = 0; i < Integer.parseInt(size); i++) {
            try {
                str1 = socketstream.getString();

            } catch (IOException ex) {
                Logger.getLogger(menuA.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            try {
                str2 = socketstream.getString();

            } catch (IOException ex) {
                Logger.getLogger(menuA.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            try {
                str3 = socketstream.getString();

            } catch (IOException ex) {
                Logger.getLogger(menuA.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            try {
                str4 = socketstream.getString();

            } catch (IOException ex) {
                Logger.getLogger(menuA.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            try {
                str5 = socketstream.getString();

            } catch (IOException ex) {
                Logger.getLogger(menuA.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            Payment payment = new Payment(str1, str2, str3, str4, str5);
            listPayment.add(payment);
        }
        PaymentsTableInf str = new PaymentsTableInf(listPayment);*/
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(menuA.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(menuA.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(menuA.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(menuA.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new menuA().setVisible(true);

            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton AllPayment;
    private javax.swing.JRadioButton BlockCard;
    private javax.swing.JRadioButton Borrow;
    private javax.swing.JRadioButton controlOperations;
    private javax.swing.JRadioButton controlServices;
    private javax.swing.JRadioButton controlUsers;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JRadioButton orderAccount;
    private javax.swing.JRadioButton showCard;
    private javax.swing.JRadioButton showCardsPerson;
    // End of variables declaration//GEN-END:variables
}
